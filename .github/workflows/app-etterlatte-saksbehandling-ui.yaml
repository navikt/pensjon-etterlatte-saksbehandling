name: etterlatte-saksbehandling-ui

env:
  APP_NAME: ${{ github.workflow }}

on:
  workflow_dispatch: # Allow manually triggered workflow run
    inputs:
      deploy-prod:
        description: 'Deploy til produksjon'
        required: false
        default: 'false'
        type: choice
        options:
          - "true"
          - "false"
  push:
    branches:
      - main
    paths:
      - apps/etterlatte-saksbehandling-ui/**
  pull_request:
    branches:
      - main
    paths:
      - apps/etterlatte-saksbehandling-ui/**

jobs:
  test:
    if: github.event_name == 'pull_request'
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install client
        working-directory: apps/${{ env.APP_NAME }}
        run: yarn --cwd client install --frozen-lockfile && yarn --cwd client build
      - name: Install server
        working-directory: apps/${{ env.APP_NAME }}
        run: yarn --cwd server install --frozen-lockfile && yarn --cwd server build
      - name: Run tests
        working-directory: apps/${{ env.APP_NAME }}/client
        run: CI=true yarn test

  build-and-publish:
    if: github.event_name != 'pull_request'
    name: Build, test and publish
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
      image-dev: ${{ steps.multi-image-output.outputs.dev }}
      image-prod: ${{ steps.multi-image-output.outputs.production }}
    strategy:
        matrix:
          environments: [production, dev]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Install and build client
        working-directory: apps/${{ env.APP_NAME }}
        run: yarn --cwd client install --frozen-lockfile && yarn --cwd client build --mode ${{ matrix.environments }}
      - name: Install and build server
        working-directory: apps/${{ env.APP_NAME }}
        run: yarn --cwd server install --frozen-lockfile && yarn --cwd server build
      - name: Run tests
        working-directory: apps/${{ env.APP_NAME }}/client
        run: CI=true yarn test
      - name: Build and publish Docker image
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: etterlatte
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          dockerfile: apps/${{ env.APP_NAME }}/Dockerfile
          docker_context: apps/${{ env.APP_NAME }}/
          image_suffix: ${{ github.workflow }}.${{ matrix.environments }}
          tag: ${{ env.GITHUB_REF_SLUG }}
      - name: Set multi image output
        id: multi-image-output
        run: echo "${{ matrix.environments }}=${{ steps.docker-build-push.outputs.image }}" >> $GITHUB_OUTPUT

  deploy-to-dev-gcp:
    if: github.event_name != 'pull_request'
    name: Deploy to dev-gcp
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: apps/${{ env.APP_NAME }}/.nais/dev.yaml
          VAR: image=${{ needs.build-and-publish.outputs.image-dev }}


  deploy-to-prod-gcp:
    name: Deploy to prod-gcp
    if: ${{ github.ref == 'refs/heads/main' || github.event.inputs.deploy-prod == 'true' }}
    needs: [build-and-publish,deploy-to-dev-gcp]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: apps/${{ env.APP_NAME }}/.nais/prod.yaml
          VAR: image=${{ needs.build-and-publish.outputs.image-prod }}